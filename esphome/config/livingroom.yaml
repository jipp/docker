substitutions:
  devicename: livingroom
  comment: illuminance
  name: woke.livingroom
  version: 2.3.0
  logger: INFO

  clk_pin: GPIO17
  mosi_pin: GPIO21
  dc_pin: GPIO33
  cs_pin: GPIO15
  reset_pin: GPIO34
  bl_pin: GPIO16

  sda_pin: GPIO2
  scl_pin: GPIO1
  button_pin: GPIO41
  ir_pin: GPIO4
  illuminance: illuminance

  small: "15"

globals:
  - id: lux
    type: int[100]
    restore_value: true
  - id: off_x
    type: int
    restore_value: false
    initial_value: "14"
  - id: off_y
    type: int
    restore_value: false
    initial_value: "19"
  - id: scale_y
    type: int
    restore_value: false
    initial_value: "90"
  - id: max_x
    type: int
    restore_value: false
    initial_value: "0"

esphome:
  <<: !include common/esphome.yaml
  on_boot:
  - then:
    - display.page.show:
        id: status_page
    - switch.turn_on:
        id: switch_bl
    - delay: 30s
    - switch.turn_off:
        id: switch_bl

esp32:
  board: esp32-s3-devkitc-1

logger:
  <<: !include common/logger.yaml

text_sensor:
- <<: !include common/text_sensor_version.yaml
- <<: !include common/text_sensor_wifi_info.yaml

sensor:
- <<: !include common/sensor_uptime.yaml
- <<: !include common/sensor_wifi_signal.yaml
- platform: bh1750
  name: ${illuminance}
  id: sensor_bh1750_illuminance
  icon: mdi:sun-wireless-outline
  on_value:
    then:
      lambda: |-
        for (int i=99; i>0; i--) {
          id(lux)[i] = id(lux)[i-1];
          if (id(lux)[i]>id(max_x)) {
            id(max_x) = id(lux)[i];
          }
        }
        id(lux)[0] = id(sensor_bh1750_illuminance).state;
        if (id(lux)[0]>id(max_x)) {
          id(max_x) = id(lux)[0];
        }

binary_sensor:
- <<: !include common/binary_sensor_status.yaml
- platform: gpio
  id: binary_sensor_button_pin
  pin:
    number: ${button_pin}
    inverted: true
  on_click:
  - min_length: 50ms
    max_length: 350ms
    then:
    - switch.turn_on:
        id: switch_bl
    - delay: 10s
    - switch.turn_off:
        id: switch_bl
  - min_length: 500ms
    max_length: 1000ms
    then:
    - display.page.show_next:
        id: display_ili9xxx

button:
- <<: !include common/restart.yaml

switch:
- platform: gpio
  pin:
    number: ${bl_pin}
  id: switch_bl

display:
- platform: ili9xxx
  model: ST7789V
  dimensions:
    height: 128
    width: 128
    offset_height: 1
    offset_width: 2
  invert_colors: true
  id: display_ili9xxx
  dc_pin:
    number: ${dc_pin}
  cs_pin:
    number: ${cs_pin}
  reset_pin:
    number: ${reset_pin}
  pages:
  - id: status_page
    lambda: |-
      it.strftime(it.get_width() - 2, ${small}, id(roboto_small), red, TextAlign::BOTTOM_RIGHT, "%d.%m.%Y, %H:%M", id(time_homeassistant).now());

      it.print(2, 2*${small}, id(roboto_small), green, TextAlign::BOTTOM_LEFT, "uptime:");
      it.printf(it.get_width() - 2, 2*${small}, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%.0f s", id(sensor_uptime).state);

      it.print(2, 3*${small}, id(roboto_small), green, TextAlign::BOTTOM_LEFT, "WiFi:");
      it.printf(it.get_width() - 2, 3*${small}, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%.0f dBm", id(sensor_wifi_signal).state);

      it.print(2, 4*${small}, id(roboto_small), green, TextAlign::BOTTOM_LEFT, "IP:");
      it.printf(it.get_width() - 2, 4*${small}, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%s", id(text_sensor_wifi_info_ip_address).state.c_str());

      it.print(2, 5*${small}, id(roboto_small), green, TextAlign::BOTTOM_LEFT, "HA:");
      it.printf(it.get_width() - 2, 5*${small}, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%s", id(binary_sensor_status).state?"on":"off");

      it.print(2, 6*${small}, id(roboto_small), green, TextAlign::BOTTOM_LEFT, "${illuminance}:");
      it.printf(it.get_width() - 2, 6*${small}, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%.0f lux", id(sensor_bh1750_illuminance).state);

      it.printf(2, it.get_height() - 2, id(roboto_small), red, TextAlign::BOTTOM_LEFT, "%s", id(text_sensor_version).state.c_str());

  - id: diagram_page
    lambda: |-
      it.strftime(it.get_width() - 2, ${small}, id(roboto_small), red, TextAlign::BOTTOM_RIGHT, "%d.%m.%Y, %H:%M", id(time_homeassistant).now());

      for (int i=99; i>=0; i--) {
        it.line(it.get_width() - id(off_x) - i, id(off_y) + id(scale_y), it.get_width() - id(off_x) - i, id(off_y) +id(scale_y) - id(lux)[i] * id(scale_y) / id(max_x));
      }

      it.printf(it.get_width() - 2, it.get_height() - 2, id(roboto_small), white, TextAlign::BOTTOM_RIGHT, "max: %i lux", id(max_x));

      it.printf(2, it.get_height() - 2, id(roboto_small), red, TextAlign::BOTTOM_LEFT, "%s", id(text_sensor_version).state.c_str());

<<: !include common/color.yaml
<<: !include common/font.yaml
<<: !include common/spi_mosi.yaml
<<: !include common/base.yaml
<<: !include common/i2c.yaml
