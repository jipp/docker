substitutions:
  devicename: basement
  comment: Gas und Strom
  name: woke.basement
  version: 2.2.1
  logger: INFO
  clk_pin: GPIO18
  miso_pin: GPIO19
  mosi_pin: GPIO23
  dc_pin: GPIO27
  cs_pin: GPIO14
  reset_pin: GPIO33
  bl_pin: GPIO32
  a_button: GPIO39
  b_button: GPIO38
  c_button: GPIO37
  dac_pin: GPIO25
  tx_pin: GPIO17
  rx_pin: GPIO16
  binary_sensor_gas: GPIO21
  energy_use: 1-0:1.8.0
  energy_win: 1-0:2.8.0
  power: 1-0:16.7.0
  gas_puls: gas puls
  gas_current: gas current
  gas_current_2: gas_current_2
  gas_offset: gas offset
  gas: gas

<<: !include common/base.yaml
<<: !include common/color.yaml
<<: !include common/font.yaml
<<: !include common/uart.yaml
<<: !include common/spi.yaml
<<: !include common/output.yaml

esp32:
  board: m5stack-core-esp32

globals:
- id: total_gas_pulses
  type: float
  initial_value: '0.0'

logger:
  logs:
    component: ERROR
  <<: !include common/logger.yaml

text_sensor:
- <<: !include common/text_sensor_version.yaml
- <<: !include common/text_sensor_wifi_info.yaml

sensor:
- <<: !include common/sensor_uptime.yaml
- <<: !include common/sensor_wifi_signal.yaml
- platform: homeassistant
  name: ${gas_current_2}
  id: sensor_homeassistant_gas_current_2
  entity_id: sensor.gas_current_2
  unit_of_measurement: m³
  accuracy_decimals: 2
  internal: true
- platform: homeassistant
  name: ${gas_offset}
  id: sensor_homeassistant_gas_offset
  entity_id: input_text.gas_offset
  unit_of_measurement: m³
  accuracy_decimals: 2
  internal: true
- platform: template
  name: ${gas}
  id: sensor_template_gas
  device_class: gas
  update_interval: 10s
  unit_of_measurement: m³
  state_class: total_increasing
  icon: mdi:fire
  accuracy_decimals: 2
  lambda: !lambda |-
    return id(sensor_homeassistant_gas_offset).state+id(sensor_homeassistant_gas_current_2).state;
- platform: template
  name: ${gas_current}
  id: sensor_template_gas_current
  device_class: gas
  update_interval: 10s
  unit_of_measurement: m³
  state_class: total_increasing
  icon: mdi:fire
  accuracy_decimals: 2
  lambda: !lambda |-
    return id(total_gas_pulses);
- platform: sml
  name: ${energy_use}
  id: sensor_sml_energy_use
  obis_code: 1-0:1.8.0
  unit_of_measurement: Wh
  accuracy_decimals: 2
  device_class: energy
  state_class: total_increasing
  filters:
  - multiply: 0.00001
  - throttle: 1s
  - throttle_average: 60s
- platform: sml
  name: ${energy_win}
  id: sensor_sml_energy_win
  obis_code: 1-0:2.8.0
  unit_of_measurement: Wh
  accuracy_decimals: 2
  device_class: energy
  state_class: total_increasing
  filters:
  - multiply: 0.00001
  - throttle: 1s
  - throttle_average: 60s
- platform: sml
  name: ${power}
  id: sensor_sml_power
  obis_code: 1-0:16.7.0
  unit_of_measurement: W
  accuracy_decimals: 2
  device_class: power
  state_class: measurement
  filters:
  - multiply: 0.01
  - throttle: 1s
  - throttle_average: 60s

binary_sensor:
- <<: !include common/binary_sensor_status.yaml
- platform: gpio
  id: binary_sensor_button_a
  pin:
    number: ${a_button}
    inverted: true
  on_click:
  - then:
    - display.page.show_previous:
        id: display_ili9xxx
- platform: gpio
  id: binary_sensor_button_b
  pin:
    number: ${b_button}
    inverted: true
  on_click:
  - then:
    - display.page.show_next:
        id: display_ili9xxx
- platform: gpio
  id: binary_sensor_button_c
  pin:
    number: ${c_button}
    inverted: true
  on_click:
  - then:
    - switch.turn_on:
        id: switch_bl
    - delay: 10s
    - switch.turn_off:
        id: switch_bl
- platform: gpio
  pin:
    number: ${binary_sensor_gas}
    inverted: true
    mode:
      input: true
      pullup: true
  id: puls
  name: Puls
  filters:
  - delayed_on: 100ms
  on_press:
  - then:
    - lambda: !lambda |-
        id(total_gas_pulses) += 0.01;

display:
- platform: ili9xxx
  model: M5STACK
  id: display_ili9xxx
  dc_pin:
    number: ${dc_pin}
  cs_pin:
    number: ${cs_pin}
  reset_pin:
    number: ${reset_pin}
  pages:
  - id: status_page
    lambda: |-
      it.strftime(it.get_width() - 11, 14, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%d.%m.%Y, %H:%M", id(time_homeassistant).now());

      it.print(11, 40, id(roboto), blue, TextAlign::BOTTOM_LEFT, "uptime:");
      it.printf(it.get_width() - 11, 40, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.0f s", id(sensor_uptime).state);

      it.print(11, 60, id(roboto), blue, TextAlign::BOTTOM_LEFT, "WiFi Signal:");
      it.printf(it.get_width() - 11, 60, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.0f dBm", id(sensor_wifi_signal).state);

      it.print(11, 80, id(roboto), blue, TextAlign::BOTTOM_LEFT, "IP Address:");
      it.printf(it.get_width() - 11, 80, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%s", id(text_sensor_wifi_info_ip_address).state.c_str());

      it.print(11, 100, id(roboto), blue, TextAlign::BOTTOM_LEFT, "Home Assistant:");
      it.printf(it.get_width() - 11, 100, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%s", id(binary_sensor_status).state?"on":"off");

      it.printf(11, it.get_height(), id(roboto_small), blue, TextAlign::BOTTOM_LEFT, "%s", id(text_sensor_version).state.c_str());

  - id: gas_page
    lambda: |-
      it.strftime(it.get_width() - 11, 14, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%d.%m.%Y, %H:%M", id(time_homeassistant).now());

      it.print(11, 40, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${gas_puls}:");
      it.printf(it.get_width() - 11, 40, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%s", id(puls).state?"on":"off");

      it.print(11, 60, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${gas_current}:");
      it.printf(it.get_width() - 11, 60, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.2f m³", id(sensor_template_gas_current).state);

      it.print(11, 80, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${gas}:");
      it.printf(it.get_width() - 11, 80, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.2f m³", id(sensor_template_gas).state);

  - id: power_page
    lambda: |-
      it.strftime(it.get_width() - 11, 14, id(roboto_small), blue, TextAlign::BOTTOM_RIGHT, "%d.%m.%Y, %H:%M", id(time_homeassistant).now());

      it.print(11, 40, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${energy_use}:");
      it.printf(it.get_width() - 11, 40, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.2f Wh", id(sensor_sml_energy_use).state);

      it.print(11, 60, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${energy_win}:");
      it.printf(it.get_width() - 11, 60, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.2f Wh", id(sensor_sml_energy_win).state);

      it.print(11, 80, id(roboto), blue, TextAlign::BOTTOM_LEFT, "${power}:");
      it.printf(it.get_width() - 11, 80, id(roboto), blue, TextAlign::BOTTOM_RIGHT, "%.2f Wh", id(sensor_sml_power).state);

switch:
- platform: gpio
  pin:
    number: ${bl_pin}
  id: switch_bl

sml:
